{"version":3,"sources":["images/reddit.png","components/Header/Header.js","components/Button/Button.js","components/Row/Row.js","components/Row/RowItem.js","components/SearchFilters/SearchFilters.js","api/redditApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","redditImage","alt","Button","props","concat","onClick","children","Row","_ref","RowItem","SearchFilters","searchTerm","handleSearchTermChange","getReddits","limit","handleLimitChange","limits","handleSortByChange","sort","components_Row_Row","onSubmit","Row_RowItem","value","onChange","placeholder","map","item","i","key","data-sortby","components_Button_Button","style","width","_x","_x2","_x3","api_redditApi_getReddits","apply","this","arguments","_callee","searchLimit","sortBy","data","dataList","reddits","regenerator_default","wrap","_context","prev","next","axios","get","sent","console","log","abrupt","stop","RedditsList","React","lazy","e","then","bind","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","categories","jokes","selectedCategory","assertThisInitialized","preventDefault","redditApi","setState","event","target","dataset","sortby","_this$state2","components_Header_Header","components_SearchFilters_SearchFilters","react","fallback","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41f728a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reddit.08af9c10.png\";","import React from 'react';\r\nimport redditImage from '../../images/reddit.png';\r\n\r\nimport './Header.scss';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <div className=\"header-image\">\r\n        <img src={redditImage} alt='' />\r\n      </div>\r\n      <div className=\"header-title\">Reddit reddits search</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = props => {\r\n  return (\r\n    <button className={`button ${props.className ? props.className : ''}`} onClick={props.onClick}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport './Row.scss';\r\n\r\nconst Row = ({children}) => {\r\n  return (\r\n    <div className=\"row\">\r\n      {children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Row\r\n","import React from 'react';\r\nimport './Row.scss';\r\n\r\nconst RowItem = ({ children }) => {\r\n  return <div className=\"row-item\">{children}</div>;\r\n};\r\n\r\nexport default RowItem;\r\n","import React, { Component } from 'react';\r\nimport Button from '../Button/Button';\r\nimport Row from '../Row/Row';\r\nimport RowItem from '../Row/RowItem';\r\n\r\nimport './SearchFilters.scss';\r\n\r\nconst SearchFilters = props => {\r\n  const {\r\n    searchTerm,\r\n    handleSearchTermChange,\r\n    getReddits,\r\n    limit,\r\n    handleLimitChange,\r\n    limits,\r\n    handleSortByChange,\r\n    sort,\r\n  } = props;\r\n\r\n  return (\r\n    <Row>\r\n      <form onSubmit={getReddits}>\r\n        <RowItem>\r\n          <input\r\n            className=\"search-input\"\r\n            value={searchTerm}\r\n            onChange={handleSearchTermChange}\r\n            placeholder=\"search redit...\"\r\n          />\r\n        </RowItem>\r\n        <RowItem>\r\n          <div className=\"search-filters__title\">Show items:</div>\r\n          <select value={limit} onChange={handleLimitChange}>\r\n            {limits.map((item, i) => (\r\n              <option value={item} key={i}>\r\n                {item}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </RowItem>\r\n        <RowItem>\r\n          <div>Sort by: </div>\r\n          <button\r\n            data-sortby=\"relevance\"\r\n            onClick={handleSortByChange}\r\n            className={`choose-button ${sort === 'relevance' ? 'choose-button--active' : ''}`}>\r\n            Relevance\r\n          </button>\r\n          <button\r\n            data-sortby=\"latest\"\r\n            onClick={handleSortByChange}\r\n            className={`choose-button ${sort === 'latest' ? 'choose-button--active' : ''}`}>\r\n            Latest\r\n          </button>\r\n        </RowItem>\r\n        <RowItem>\r\n          <Button onClick={getReddits} style={{ width: '100%' }} className=\"search-button\">\r\n            GET\r\n          </Button>\r\n        </RowItem>\r\n      </form>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default SearchFilters;\r\n","import axios from 'axios';\r\n\r\nexport async function getReddits(searchTerm, searchLimit, sortBy) {\r\n  const data = await axios.get(`http://www.reddit.com/search.json?q=${searchTerm}&sort=${sortBy}&limit=${searchLimit}`);\r\n  const dataList = data.data.data.children;\r\n  const reddits = dataList.map(item => item.data); //transform into array of objects\r\n  console.log('api', reddits);\r\n  return reddits;\r\n}\r\n","import React, { Component, Suspense } from 'react';\r\nimport Header from './components/Header/Header';\r\nimport SearchFilters from './components/SearchFilters/SearchFilters';\r\nimport * as redditApi from './api/redditApi';\r\n\r\nimport './App.scss';\r\n\r\nconst RedditsList = React.lazy(() => import('./components/RedditsList/RedditsList'));\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      categories: [],\r\n      jokes: [],\r\n      searchTerm: 'Scotland',\r\n      selectedCategory: null,\r\n      sortBy: 'relevance',\r\n      limit: 20,\r\n      data: [],\r\n    };\r\n\r\n    this.handleSearchTermChange = this.handleSearchTermChange.bind(this);\r\n    this.handleLimitChange = this.handleLimitChange.bind(this);\r\n    this.handleSortByChange = this.handleSortByChange.bind(this);\r\n    this.getReddits = this.getReddits.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    this.getReddits();\r\n    // console.log('state', this.state.data)\r\n  }\r\n\r\n  async getReddits(e) {\r\n    e && e.preventDefault();\r\n    const { searchTerm, limit, sortBy } = this.state;\r\n    console.log(searchTerm, limit, sortBy);\r\n    const data = await redditApi.getReddits(searchTerm, limit, sortBy);\r\n    this.setState({ data });\r\n  }\r\n\r\n  handleSearchTermChange(event) {\r\n    this.setState({ searchTerm: event.target.value });\r\n  }\r\n\r\n  handleSortByChange(event) {\r\n    console.log(event.target.dataset.sortby);\r\n    this.setState({ sortBy: event.target.dataset.sortby });\r\n  }\r\n\r\n  handleLimitChange(event) {\r\n    this.setState({ limit: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const limits = [ 10, 20, 30, 50 ];\r\n    const { searchTerm, data, limit, sortBy } = this.state;\r\n    console.log('data from render', data);\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <SearchFilters\r\n          searchTerm={searchTerm}\r\n          handleSearchTermChange={this.handleSearchTermChange}\r\n          getReddits={this.getReddits}\r\n          limit={limit}\r\n          handleLimitChange={this.handleLimitChange}\r\n          limits={limits}\r\n          handleSortByChange={this.handleSortByChange}\r\n          sort={sortBy}\r\n        />\r\n        <Suspense fallback={<div>Loading ...</div>}>\r\n          <RedditsList data={data} />\r\n        </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}